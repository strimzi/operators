apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      strimzi.io/kafka-version: 2.8.0
      strimzi.io/storage: '{"type":"ephemeral"}'
    creationTimestamp: "2021-08-26T13:33:27Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: my-cluster
      app.kubernetes.io/managed-by: strimzi-cluster-operator
      app.kubernetes.io/name: kafka
      app.kubernetes.io/part-of: strimzi-my-cluster
      strimzi.io/cluster: my-cluster
      strimzi.io/kind: Kafka
      strimzi.io/name: my-cluster-kafka
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:strimzi.io/kafka-version: {}
            f:strimzi.io/storage: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:strimzi.io/cluster: {}
            f:strimzi.io/kind: {}
            f:strimzi.io/name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4c54f47f-176d-411b-ab2b-1da3f5ec4086"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:podManagementPolicy: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:serviceName: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:strimzi.io/broker-configuration-hash: {}
                f:strimzi.io/clients-ca-cert-generation: {}
                f:strimzi.io/cluster-ca-cert-generation: {}
                f:strimzi.io/generation: {}
                f:strimzi.io/inter-broker-protocol-version: {}
                f:strimzi.io/kafka-version: {}
                f:strimzi.io/log-message-format-version: {}
                f:strimzi.io/logging-appenders-hash: {}
                f:strimzi.io/storage: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:strimzi.io/cluster: {}
                f:strimzi.io/kind: {}
                f:strimzi.io/name: {}
              f:name: {}
            f:spec:
              f:affinity: {}
              f:containers:
                k:{"name":"kafka"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"KAFKA_HEAP_OPTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KAFKA_METRICS_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STRIMZI_KAFKA_GC_LOG_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9091,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9092,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9093,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/kafka/broker-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/client-ca-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/cluster-ca-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/custom-config/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/kafka/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/opt/kafka"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"broker-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"client-ca-cert"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"cluster-ca"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"kafka-metrics-and-logging"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"ready-files"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                    f:sizeLimit: {}
                  f:name: {}
                k:{"name":"strimzi-tmp"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                    f:sizeLimit: {}
                  f:name: {}
          f:updateStrategy:
            f:type: {}
      manager: okhttp
      operation: Update
      time: "2021-08-26T13:33:27Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:collisionCount: {}
          f:currentReplicas: {}
          f:currentRevision: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updateRevision: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-08-26T13:33:47Z"
    name: my-cluster-kafka
    namespace: second-namespace-test
    ownerReferences:
    - apiVersion: kafka.strimzi.io/v1beta2
      blockOwnerDeletion: false
      controller: false
      kind: Kafka
      name: my-cluster
      uid: 4c54f47f-176d-411b-ab2b-1da3f5ec4086
    resourceVersion: "1882338"
    uid: 5e7eacfc-a392-43ed-acb3-5254898039ee
  spec:
    podManagementPolicy: Parallel
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        strimzi.io/cluster: my-cluster
        strimzi.io/kind: Kafka
        strimzi.io/name: my-cluster-kafka
    serviceName: my-cluster-kafka-brokers
    template:
      metadata:
        annotations:
          strimzi.io/broker-configuration-hash: afef42fa2b8f0a614e0e5039ac8e4f2fc6ddfd2d746bc35b14fb71bd4fece6315c584caedfdf364d
          strimzi.io/clients-ca-cert-generation: "0"
          strimzi.io/cluster-ca-cert-generation: "0"
          strimzi.io/generation: "0"
          strimzi.io/inter-broker-protocol-version: "2.8"
          strimzi.io/kafka-version: 2.8.0
          strimzi.io/log-message-format-version: "2.8"
          strimzi.io/logging-appenders-hash: e893ac9f32f7958042d1c82477e3484b0f8ebad5
          strimzi.io/storage: '{"type":"ephemeral"}'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: my-cluster
          app.kubernetes.io/managed-by: strimzi-cluster-operator
          app.kubernetes.io/name: kafka
          app.kubernetes.io/part-of: strimzi-my-cluster
          strimzi.io/cluster: my-cluster
          strimzi.io/kind: Kafka
          strimzi.io/name: my-cluster-kafka
        name: my-cluster-kafka
      spec:
        affinity: {}
        containers:
        - command:
          - /opt/kafka/kafka_run.sh
          env:
          - name: KAFKA_METRICS_ENABLED
            value: "false"
          - name: STRIMZI_KAFKA_GC_LOG_ENABLED
            value: "false"
          - name: KAFKA_HEAP_OPTS
            value: -Xms128M
          image: quay.io/strimzi/kafka:latest-kafka-2.8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /opt/kafka/kafka_liveness.sh
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kafka
          ports:
          - containerPort: 9090
            name: tcp-ctrlplane
            protocol: TCP
          - containerPort: 9091
            name: tcp-replication
            protocol: TCP
          - containerPort: 9092
            name: tcp-clients
            protocol: TCP
          - containerPort: 9093
            name: tcp-clientstls
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - test
              - -f
              - /var/opt/kafka/kafka-ready
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kafka/data
            name: data
          - mountPath: /tmp
            name: strimzi-tmp
          - mountPath: /opt/kafka/cluster-ca-certs
            name: cluster-ca
          - mountPath: /opt/kafka/broker-certs
            name: broker-certs
          - mountPath: /opt/kafka/client-ca-certs
            name: client-ca-cert
          - mountPath: /opt/kafka/custom-config/
            name: kafka-metrics-and-logging
          - mountPath: /var/opt/kafka
            name: ready-files
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: my-cluster-kafka
        serviceAccountName: my-cluster-kafka
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir:
            medium: Memory
            sizeLimit: 1Mi
          name: strimzi-tmp
        - name: cluster-ca
          secret:
            defaultMode: 288
            secretName: my-cluster-cluster-ca-cert
        - name: broker-certs
          secret:
            defaultMode: 288
            secretName: my-cluster-kafka-brokers
        - name: client-ca-cert
          secret:
            defaultMode: 288
            secretName: my-cluster-clients-ca-cert
        - configMap:
            defaultMode: 420
            name: my-cluster-kafka-config
          name: kafka-metrics-and-logging
        - emptyDir:
            medium: Memory
            sizeLimit: 1Ki
          name: ready-files
    updateStrategy:
      type: OnDelete
  status:
    collisionCount: 0
    currentReplicas: 3
    currentRevision: my-cluster-kafka-647d8c747
    observedGeneration: 1
    readyReplicas: 3
    replicas: 3
    updateRevision: my-cluster-kafka-647d8c747
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      strimzi.io/kafka-version: 2.8.0
      strimzi.io/storage: '{"type":"ephemeral"}'
    creationTimestamp: "2021-08-26T13:37:26Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: my-cluster-target
      app.kubernetes.io/managed-by: strimzi-cluster-operator
      app.kubernetes.io/name: kafka
      app.kubernetes.io/part-of: strimzi-my-cluster-target
      strimzi.io/cluster: my-cluster-target
      strimzi.io/kind: Kafka
      strimzi.io/name: my-cluster-target-kafka
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:strimzi.io/kafka-version: {}
            f:strimzi.io/storage: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:strimzi.io/cluster: {}
            f:strimzi.io/kind: {}
            f:strimzi.io/name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"70a31c21-ef2f-4436-8b56-63d533600301"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:podManagementPolicy: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:serviceName: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:strimzi.io/broker-configuration-hash: {}
                f:strimzi.io/clients-ca-cert-generation: {}
                f:strimzi.io/cluster-ca-cert-generation: {}
                f:strimzi.io/generation: {}
                f:strimzi.io/inter-broker-protocol-version: {}
                f:strimzi.io/kafka-version: {}
                f:strimzi.io/log-message-format-version: {}
                f:strimzi.io/logging-appenders-hash: {}
                f:strimzi.io/storage: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:strimzi.io/cluster: {}
                f:strimzi.io/kind: {}
                f:strimzi.io/name: {}
              f:name: {}
            f:spec:
              f:affinity: {}
              f:containers:
                k:{"name":"kafka"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"KAFKA_HEAP_OPTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KAFKA_METRICS_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STRIMZI_KAFKA_GC_LOG_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9091,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9092,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9093,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/kafka/broker-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/client-ca-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/cluster-ca-certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/custom-config/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/kafka/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/opt/kafka"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"broker-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"client-ca-cert"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"cluster-ca"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"kafka-metrics-and-logging"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"ready-files"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                    f:sizeLimit: {}
                  f:name: {}
                k:{"name":"strimzi-tmp"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                    f:sizeLimit: {}
                  f:name: {}
          f:updateStrategy:
            f:type: {}
      manager: okhttp
      operation: Update
      time: "2021-08-26T13:37:26Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:collisionCount: {}
          f:currentReplicas: {}
          f:currentRevision: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updateRevision: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-08-26T13:38:16Z"
    name: my-cluster-target-kafka
    namespace: second-namespace-test
    ownerReferences:
    - apiVersion: kafka.strimzi.io/v1beta2
      blockOwnerDeletion: false
      controller: false
      kind: Kafka
      name: my-cluster-target
      uid: 70a31c21-ef2f-4436-8b56-63d533600301
    resourceVersion: "1884212"
    uid: 4574495b-6f2e-49fc-b433-08afdb63e00e
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        strimzi.io/cluster: my-cluster-target
        strimzi.io/kind: Kafka
        strimzi.io/name: my-cluster-target-kafka
    serviceName: my-cluster-target-kafka-brokers
    template:
      metadata:
        annotations:
          strimzi.io/broker-configuration-hash: a8c7fc93ba3daca848edfef78826e2e89e1f767b746bc35b14fb71bd4fece6315c584caedfdf364d
          strimzi.io/clients-ca-cert-generation: "0"
          strimzi.io/cluster-ca-cert-generation: "0"
          strimzi.io/generation: "0"
          strimzi.io/inter-broker-protocol-version: "2.8"
          strimzi.io/kafka-version: 2.8.0
          strimzi.io/log-message-format-version: "2.8"
          strimzi.io/logging-appenders-hash: e893ac9f32f7958042d1c82477e3484b0f8ebad5
          strimzi.io/storage: '{"type":"ephemeral"}'
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: my-cluster-target
          app.kubernetes.io/managed-by: strimzi-cluster-operator
          app.kubernetes.io/name: kafka
          app.kubernetes.io/part-of: strimzi-my-cluster-target
          strimzi.io/cluster: my-cluster-target
          strimzi.io/kind: Kafka
          strimzi.io/name: my-cluster-target-kafka
        name: my-cluster-target-kafka
      spec:
        affinity: {}
        containers:
        - command:
          - /opt/kafka/kafka_run.sh
          env:
          - name: KAFKA_METRICS_ENABLED
            value: "false"
          - name: STRIMZI_KAFKA_GC_LOG_ENABLED
            value: "false"
          - name: KAFKA_HEAP_OPTS
            value: -Xms128M
          image: quay.io/strimzi/kafka:latest-kafka-2.8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /opt/kafka/kafka_liveness.sh
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: kafka
          ports:
          - containerPort: 9090
            name: tcp-ctrlplane
            protocol: TCP
          - containerPort: 9091
            name: tcp-replication
            protocol: TCP
          - containerPort: 9092
            name: tcp-clients
            protocol: TCP
          - containerPort: 9093
            name: tcp-clientstls
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - test
              - -f
              - /var/opt/kafka/kafka-ready
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kafka/data
            name: data
          - mountPath: /tmp
            name: strimzi-tmp
          - mountPath: /opt/kafka/cluster-ca-certs
            name: cluster-ca
          - mountPath: /opt/kafka/broker-certs
            name: broker-certs
          - mountPath: /opt/kafka/client-ca-certs
            name: client-ca-cert
          - mountPath: /opt/kafka/custom-config/
            name: kafka-metrics-and-logging
          - mountPath: /var/opt/kafka
            name: ready-files
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: my-cluster-target-kafka
        serviceAccountName: my-cluster-target-kafka
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir:
            medium: Memory
            sizeLimit: 1Mi
          name: strimzi-tmp
        - name: cluster-ca
          secret:
            defaultMode: 288
            secretName: my-cluster-target-cluster-ca-cert
        - name: broker-certs
          secret:
            defaultMode: 288
            secretName: my-cluster-target-kafka-brokers
        - name: client-ca-cert
          secret:
            defaultMode: 288
            secretName: my-cluster-target-clients-ca-cert
        - configMap:
            defaultMode: 420
            name: my-cluster-target-kafka-config
          name: kafka-metrics-and-logging
        - emptyDir:
            medium: Memory
            sizeLimit: 1Ki
          name: ready-files
    updateStrategy:
      type: OnDelete
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: my-cluster-target-kafka-5dfcb84dfd
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: my-cluster-target-kafka-5dfcb84dfd
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      strimzi.io/storage: '{"type":"ephemeral"}'
    creationTimestamp: "2021-08-26T13:36:42Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: my-cluster-target
      app.kubernetes.io/managed-by: strimzi-cluster-operator
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/part-of: strimzi-my-cluster-target
      strimzi.io/cluster: my-cluster-target
      strimzi.io/kind: Kafka
      strimzi.io/name: my-cluster-target-zookeeper
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:strimzi.io/storage: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:strimzi.io/cluster: {}
            f:strimzi.io/kind: {}
            f:strimzi.io/name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"70a31c21-ef2f-4436-8b56-63d533600301"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:podManagementPolicy: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:serviceName: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:strimzi.io/cluster-ca-cert-generation: {}
                f:strimzi.io/generation: {}
                f:strimzi.io/logging-hash: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:strimzi.io/cluster: {}
                f:strimzi.io/kind: {}
                f:strimzi.io/name: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"zookeeper"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"KAFKA_HEAP_OPTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STRIMZI_KAFKA_GC_LOG_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ZOOKEEPER_CONFIGURATION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ZOOKEEPER_METRICS_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ZOOKEEPER_SNAPSHOT_CHECK_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":2181,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":2888,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":3888,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/kafka/cluster-ca-certs/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/custom-config/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/zookeeper-node-certs/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/zookeeper"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"cluster-ca-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"strimzi-tmp"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                    f:sizeLimit: {}
                  f:name: {}
                k:{"name":"zookeeper-metrics-and-logging"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"zookeeper-nodes"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
          f:updateStrategy:
            f:type: {}
      manager: okhttp
      operation: Update
      time: "2021-08-26T13:36:42Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:collisionCount: {}
          f:currentReplicas: {}
          f:currentRevision: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updateRevision: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-08-26T13:37:22Z"
    name: my-cluster-target-zookeeper
    namespace: second-namespace-test
    ownerReferences:
    - apiVersion: kafka.strimzi.io/v1beta2
      blockOwnerDeletion: false
      controller: false
      kind: Kafka
      name: my-cluster-target
      uid: 70a31c21-ef2f-4436-8b56-63d533600301
    resourceVersion: "1883807"
    uid: 29ee8459-ddf6-4f1a-9d7d-89d122e5022a
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        strimzi.io/cluster: my-cluster-target
        strimzi.io/kind: Kafka
        strimzi.io/name: my-cluster-target-zookeeper
    serviceName: my-cluster-target-zookeeper-nodes
    template:
      metadata:
        annotations:
          strimzi.io/cluster-ca-cert-generation: "0"
          strimzi.io/generation: "0"
          strimzi.io/logging-hash: 300e75146e7c338a6367c3fe2c3598ae3a2d6d05
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: my-cluster-target
          app.kubernetes.io/managed-by: strimzi-cluster-operator
          app.kubernetes.io/name: zookeeper
          app.kubernetes.io/part-of: strimzi-my-cluster-target
          strimzi.io/cluster: my-cluster-target
          strimzi.io/kind: Kafka
          strimzi.io/name: my-cluster-target-zookeeper
        name: my-cluster-target-zookeeper
      spec:
        containers:
        - command:
          - /opt/kafka/zookeeper_run.sh
          env:
          - name: ZOOKEEPER_METRICS_ENABLED
            value: "false"
          - name: ZOOKEEPER_SNAPSHOT_CHECK_ENABLED
            value: "true"
          - name: STRIMZI_KAFKA_GC_LOG_ENABLED
            value: "false"
          - name: KAFKA_HEAP_OPTS
            value: -Xms128M
          - name: ZOOKEEPER_CONFIGURATION
            value: |
              tickTime=2000
              initLimit=5
              syncLimit=2
              autopurge.purgeInterval=1
          image: quay.io/strimzi/kafka:latest-kafka-2.8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /opt/kafka/zookeeper_healthcheck.sh
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: zookeeper
          ports:
          - containerPort: 2888
            name: tcp-clustering
            protocol: TCP
          - containerPort: 3888
            name: tcp-election
            protocol: TCP
          - containerPort: 2181
            name: tcp-clients
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /opt/kafka/zookeeper_healthcheck.sh
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: strimzi-tmp
          - mountPath: /var/lib/zookeeper
            name: data
          - mountPath: /opt/kafka/custom-config/
            name: zookeeper-metrics-and-logging
          - mountPath: /opt/kafka/zookeeper-node-certs/
            name: zookeeper-nodes
          - mountPath: /opt/kafka/cluster-ca-certs/
            name: cluster-ca-certs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: my-cluster-target-zookeeper
        serviceAccountName: my-cluster-target-zookeeper
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir:
            medium: Memory
            sizeLimit: 1Mi
          name: strimzi-tmp
        - configMap:
            defaultMode: 420
            name: my-cluster-target-zookeeper-config
          name: zookeeper-metrics-and-logging
        - name: zookeeper-nodes
          secret:
            defaultMode: 288
            secretName: my-cluster-target-zookeeper-nodes
        - name: cluster-ca-certs
          secret:
            defaultMode: 288
            secretName: my-cluster-target-cluster-ca-cert
    updateStrategy:
      type: OnDelete
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: my-cluster-target-zookeeper-6c58b677c8
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: my-cluster-target-zookeeper-6c58b677c8
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      strimzi.io/storage: '{"type":"ephemeral"}'
    creationTimestamp: "2021-08-26T13:32:41Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: my-cluster
      app.kubernetes.io/managed-by: strimzi-cluster-operator
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/part-of: strimzi-my-cluster
      strimzi.io/cluster: my-cluster
      strimzi.io/kind: Kafka
      strimzi.io/name: my-cluster-zookeeper
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:strimzi.io/storage: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
            f:strimzi.io/cluster: {}
            f:strimzi.io/kind: {}
            f:strimzi.io/name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"4c54f47f-176d-411b-ab2b-1da3f5ec4086"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:podManagementPolicy: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector: {}
          f:serviceName: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:strimzi.io/cluster-ca-cert-generation: {}
                f:strimzi.io/generation: {}
                f:strimzi.io/logging-hash: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/managed-by: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:strimzi.io/cluster: {}
                f:strimzi.io/kind: {}
                f:strimzi.io/name: {}
              f:name: {}
            f:spec:
              f:containers:
                k:{"name":"zookeeper"}:
                  .: {}
                  f:command: {}
                  f:env:
                    .: {}
                    k:{"name":"KAFKA_HEAP_OPTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"STRIMZI_KAFKA_GC_LOG_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ZOOKEEPER_CONFIGURATION"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ZOOKEEPER_METRICS_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ZOOKEEPER_SNAPSHOT_CHECK_ENABLED"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":2181,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":2888,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":3888,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/kafka/cluster-ca-certs/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/custom-config/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/kafka/zookeeper-node-certs/"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/zookeeper"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"cluster-ca-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"data"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"strimzi-tmp"}:
                  .: {}
                  f:emptyDir:
                    .: {}
                    f:medium: {}
                    f:sizeLimit: {}
                  f:name: {}
                k:{"name":"zookeeper-metrics-and-logging"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"zookeeper-nodes"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
          f:updateStrategy:
            f:type: {}
      manager: okhttp
      operation: Update
      time: "2021-08-26T13:32:41Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:collisionCount: {}
          f:currentReplicas: {}
          f:currentRevision: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updateRevision: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-08-26T13:33:01Z"
    name: my-cluster-zookeeper
    namespace: second-namespace-test
    ownerReferences:
    - apiVersion: kafka.strimzi.io/v1beta2
      blockOwnerDeletion: false
      controller: false
      kind: Kafka
      name: my-cluster
      uid: 4c54f47f-176d-411b-ab2b-1da3f5ec4086
    resourceVersion: "1881939"
    uid: 1ff45c9d-f5b4-4b45-b724-ccd83ea535df
  spec:
    podManagementPolicy: Parallel
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        strimzi.io/cluster: my-cluster
        strimzi.io/kind: Kafka
        strimzi.io/name: my-cluster-zookeeper
    serviceName: my-cluster-zookeeper-nodes
    template:
      metadata:
        annotations:
          strimzi.io/cluster-ca-cert-generation: "0"
          strimzi.io/generation: "0"
          strimzi.io/logging-hash: 300e75146e7c338a6367c3fe2c3598ae3a2d6d05
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: my-cluster
          app.kubernetes.io/managed-by: strimzi-cluster-operator
          app.kubernetes.io/name: zookeeper
          app.kubernetes.io/part-of: strimzi-my-cluster
          strimzi.io/cluster: my-cluster
          strimzi.io/kind: Kafka
          strimzi.io/name: my-cluster-zookeeper
        name: my-cluster-zookeeper
      spec:
        containers:
        - command:
          - /opt/kafka/zookeeper_run.sh
          env:
          - name: ZOOKEEPER_METRICS_ENABLED
            value: "false"
          - name: ZOOKEEPER_SNAPSHOT_CHECK_ENABLED
            value: "true"
          - name: STRIMZI_KAFKA_GC_LOG_ENABLED
            value: "false"
          - name: KAFKA_HEAP_OPTS
            value: -Xms128M
          - name: ZOOKEEPER_CONFIGURATION
            value: |
              tickTime=2000
              initLimit=5
              syncLimit=2
              autopurge.purgeInterval=1
          image: quay.io/strimzi/kafka:latest-kafka-2.8.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /opt/kafka/zookeeper_healthcheck.sh
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: zookeeper
          ports:
          - containerPort: 2888
            name: tcp-clustering
            protocol: TCP
          - containerPort: 3888
            name: tcp-election
            protocol: TCP
          - containerPort: 2181
            name: tcp-clients
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /opt/kafka/zookeeper_healthcheck.sh
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: strimzi-tmp
          - mountPath: /var/lib/zookeeper
            name: data
          - mountPath: /opt/kafka/custom-config/
            name: zookeeper-metrics-and-logging
          - mountPath: /opt/kafka/zookeeper-node-certs/
            name: zookeeper-nodes
          - mountPath: /opt/kafka/cluster-ca-certs/
            name: cluster-ca-certs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: my-cluster-zookeeper
        serviceAccountName: my-cluster-zookeeper
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: data
        - emptyDir:
            medium: Memory
            sizeLimit: 1Mi
          name: strimzi-tmp
        - configMap:
            defaultMode: 420
            name: my-cluster-zookeeper-config
          name: zookeeper-metrics-and-logging
        - name: zookeeper-nodes
          secret:
            defaultMode: 288
            secretName: my-cluster-zookeeper-nodes
        - name: cluster-ca-certs
          secret:
            defaultMode: 288
            secretName: my-cluster-cluster-ca-cert
    updateStrategy:
      type: OnDelete
  status:
    collisionCount: 0
    currentReplicas: 3
    currentRevision: my-cluster-zookeeper-564c6d776d
    observedGeneration: 1
    readyReplicas: 3
    replicas: 3
    updateRevision: my-cluster-zookeeper-564c6d776d
    updatedReplicas: 3
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
